import uuid

class Account:
    def __init__(self, account_id: str, customer_name: str, customer_address: str, balance: float):
        self.account_id = account_id
        self.balance = balance
        self.customer_name = customer_name
        self.customer_address = customer_address

    def deposit(self, amount: float):
        self.balance += amount

    def withdraw(self, amount: float):
        if amount <= self.balance:
            self.balance -= amount
        else:
            raise ValueError("Insufficient funds")

class Bank:
    def __init__(self):
        self.accounts = {}

    def create_account(self, customer_name: str, customer_address: str, initial_balance: float) -> Account:
        account_id = str(uuid.uuid4())
        account = Account(account_id, customer_name, customer_address, initial_balance)
        
        # Проверка на уникальность номера счета
        while account_id in self.accounts:
            account_id = str(uuid.uuid4())
        
        self.accounts[account_id] = account
        return account

    def get_account(self, account_id: str) -> Account:
        account = self.accounts.get(account_id)
        if account:
            return account
        else:
            raise ValueError("Account not found")

class Customer:
    def __init__(self, name: str, address: str, bank: Bank):
        self.name = name
        self.address = address
        self.bank = bank

    def open_account(self, initial_balance: float) -> Account:
        account = self.bank.create_account(self.name, self.address, initial_balance)
        return account

def banking_scenario():
    bank = Bank()
    customer1 = Customer("Alice", "Moscow, Stremyannyi per, 1", bank)
    customer2 = Customer("Bob", "Vorkuta, ul. Lenina, 5", bank)

    alice_account = customer1.open_account(initial_balance=500.0)
    alice_account.deposit(100.0)
    print(f"Alice's balance: {alice_account.balance}")

    bob_account = customer2.open_account(initial_balance=1000.0)
    bob_account.deposit(500.0)
    print(f"Bob's balance: {bob_account.balance}")

    alice_account.withdraw(300.0)
    print(f"Alice's balance: {alice_account.balance}")

    try:
        alice_account.withdraw(500.0)
    except ValueError as e:
        print(e)

    retrieved_account = bank.get_account(alice_account.account_id)
    print(f"Account {retrieved_account.account_id} by {retrieved_account.customer_name} ({retrieved_account.customer_address}), balance {retrieved_account.balance}")
